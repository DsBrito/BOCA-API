Part 2:

- [ok] Follow the quick start guide in the `boca-docker` project. Change the work directory to `./boca-docker` and run: `docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d`;
- [ok] Visit http://localhost:8000/boca and log in as instructed;
- [ok] To stop the application: `docker compose -f docker-compose.yml -f docker-compose.prod.yml down`
- [ok] Edit the `docker-compose.prod.yml` file. First, comment out the `boca-jail` service. Then, add the `volumes` section under the `boca-db` service to automatically import the sample dataset (`boca-dump-bdcomp-anon.sql`) at startup and a volume (managed by Docker) to persist the data (see solution from previous lab practice). As an example for the first, bind mount the local `./boca-docker/init` folder to the container's `/docker-entrypoint-initdb.d`. Then, place the `boca-dump-bdcomp-anon.sql` and `create_bocauser.sql` files in it;
- [ok] Create a `docker-compose.api.yml` file based on the `docker-compose.dev.yml`. Add a `boca-api` service following the same pattern (see below). Then, remove all other services but `boca-adminer`. Save the file and close it;

	boca-api:
        image: <your username>/boca-api:latest
        build: 
            context: .
            dockerfile: docker/dev/api/Dockerfile
        ports:
            - 49160:8080

- [ok] Cleanup: list the existing volumes (`docker volume ls`) and remove them all (`docker volume rm $(docker volume ls -q)`);
- [ok] Update the paths in your `Dockerfile` to reflect the context above (for instance, `COPY package*.json ./` -> `COPY ./docker/dev/api/package*.json ./`);
- [ok] Run the command to launch the application: `docker compose -f docker-compose.yml -f docker-compose.prod.yml -f docker-compose.api.yml up -d --build`. The `--build` flag creates a new image of the `boca-api` service if there are changes in the `./boca-docker/docker/dev/api` folder;
- [] Using the web browser visit http://localhost:8000/boca and log in (user: admin | password: boca). You should be able to see the data of an active contest (the interface might not be 100% functional);
- [] In order to access the database, visit http:// :8080 and log in with the credentials below:

	System: PostgreSQL
	Server: boca-db
	Username: postgres
	Password: superpass

- [] To stop all services: `docker compose -f docker-compose.yml -f docker-compose.prod.yml -f docker-compose.api.yml down`. NOTE: it will be necessary to stop and rebuild the image of the API whenever the source code is updated;
- [] The next step requires implementing the T2 specification. See https://blog.logrocket.com/crud-rest-api-node-js-express-postgresql/#setting-up-express-server;
